"""
Django settings for mysite project.

Generated by 'django-admin startproject' using Django 4.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
from os import getenv
from pathlib import Path

from django.utils.translation import gettext_lazy as _

# import sentry_sdk
#
# sentry_sdk.init(
#     dsn="https://d8cb70ca919ca933be48d41d3ba4f7be@o4505988104781824.ingest.sentry.io/4505988109631488",
#     traces_sample_rate=1.0,
#     profiles_sample_rate=1.0,

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
DATABASE_DIR = BASE_DIR / "database"  # путь для хранения базы данных
DATABASE_DIR.mkdir(exist_ok=True)  # проверяем наличие папки по указанному пути

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = getenv(
    "DJANGO_SECRET_KEY",
    'django-insecure-a(z!71^$vf(!1)ql$16=3%6j+j4kv4nsia%&8#gy7xhde_tqvy',
)


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = getenv("DJANGO_DEBUG", "0") == "1"

ALLOWED_HOSTS = [
    '0.0.0.0',
    '127.0.0.1',
] + getenv("DJANGO_ALLOWED_HOSTS", "").split(",")

INTERNAL_IPS = [
    '0.0.0.0',
    "127.0.0.1",
]

if DEBUG:
    import socket  # only if you haven't already imported this
    hostname, i, ips = socket.gethostbyname_ex(socket.gethostname())
    INTERNAL_IPS.extend(
        [ip[: ip.rfind(".")] + ".1" for ip in ips] + ["127.0.0.1", "10.0.2.2"]
    )

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sitemaps',

    'rest_framework',
    'django_filters',
    'drf_spectacular',
    'debug_toolbar',

    'shopapp.apps.ShopappConfig',
    'requestdataapp.apps.RequestdataappConfig',
    'myauth.apps.MyauthConfig',
    'BlogApp.apps.BlogappConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'requestdataapp.middlewares.set_useragent_on_request_middleware',
    'requestdataapp.middlewares.ThrottlingMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
]

CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.filebased.FileBasedCache",
        "LOCATION": "C:/PycharmProjects/python_django/cache",
    }
}

ROOT_URLCONF = 'mysite.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mysite.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': DATABASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

LOCALE_PATHS = [
    BASE_DIR / 'locale'
]

LANGUAGES = [
    ('en', _('English')),
    ('ru', _('Russian')),
]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'

MEDIA_URL = '/media/'

MEDIA_ROOT = BASE_DIR / 'uploads'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
    ],
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema'
}

SPECTACULAR_SETTINGS = {
    # указать заголовок на странице документации
    'TITLE': 'My Site Project API',
    # описание
    'DESCRIPTION': 'My site with shop app and custom auth',
    # версия приложения
    'VERSION': '1.0.0',
    # исключение данной страницы из перечня документации
    'SERVE_INCLUDE_SCHEMA': False,
}

LOGGING = {
    # первая версия параметров для логирования
    'version': 1,
    # существующие логгеры не отключаем
    "disable_existing_loggers": False,
    # в фильтрах отображаем, когда выводить логи для SQL запросов
    # 'filters': {
    #     # так как необходимо создать фильтр для debug режима, указываем следующий фильтр
    #     'require_debug_true': {
    #         # круглые скобки - это выполняемый объект, который называется 'django_utils_log.RequireDebugTrue'
    #         # это специальный фильтр, который позволяет выводить логи, если активен DEBUG режим в настройках сайта
    #         '()': 'django.utils.log.RequireDebugTrue',
    #     }
    # },
    'formatters': {
        'verbose': {
            'format': '%(asctime)s [%(levelname)s] %(name)s: %(message)s',
        },
    },
    # настройка обработчика логов
    'handlers': {
        # логи выводятся в консоль
        'console': {
            # параметры для обработки этого лога
            # установка уровня логирования
            'level': 'INFO',
            # указывается список фильтров, которыми пользуемся
            # 'filters': [
            #     # эта настройка отсеивает логи (не выводит), если приложение работает не в DEBUG режиме
            #     'require_debug_true'
            # ],
            # Указывается класс, который будет использован для логирования
            # 'Logging.StreamHandler', этот класс будет выводить всё потоком в терминал, если включен DEBUG режим
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    # указываем, какие логгеры надо использовать
    # 'loggers': {
    #     # указывается, что взаимодействие происходит с базой данных Джанго
    #     'django.db.backends': {
    #         # в том случае, если используется DEBUG режим
    #         'level': 'DEBUG',
    #         # в этом случае используем обработчик 'console', который настроен выше
    #         'handlers': ['console'],
    #     },
    # },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    }
}
